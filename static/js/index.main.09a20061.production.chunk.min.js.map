{"version":3,"sources":["logo.svg","components/Navbar.js","components/Footer.js","DatosMundiales.js","DatosCountry.js","DatosRegionesPeru.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","Footer","href","DatosMundiales","useState","dataMundial","setdataMundial","loadingMundial","setLoadingMundial","actualizarComponente","setActualizarComponente","useEffect","a","axios","resultadoJSON","data","ObtencionDatos","src","logo","alt","onClick","style","color","role","cases","deaths","recovered","DatosCountry","datosCountry","setDatosCountry","indexDatosCountry","setIndexDatosCountry","loadingCounrty","setLoadingCountry","unaVez","setUnaVez","datos","filter","datoCountry","index","country","ObtensionDatos","id","data-live-search","data-show-subtext","onChange","e","currentTarget","value","map","key","selected","total","newCases","totalDeaths","newDeaths","serious","totalRecovered","DatosRegionesPeru","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/index.main.09a20061.production.chunk.min.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.94958d24.svg\";","import React from 'react'\n\nconst Navbar = () => {\n  return (\n    <header className=\"css-ue4yb0\">\n      <nav className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 border-bottom shadow-sm\">\n        <h5 className=\"my-0 mr-md-auto font-weight-normal\">Coronavirus en Per√∫ xddd</h5>\n      </nav>\n    </header>\n  )\n}\nexport default Navbar\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <div>\n            <footer className=\"my-5 pt-5 text-muted text-center text-small\">\n                <hr></hr>\n                <p className=\"mb-1\">¬© 2020 <a href=\"https://www.linkedin.com/in/cuevacelis/\">@Cueva Celis</a></p>\n            </footer>\n        </div>\n    )\n}","import React, {useState,useEffect} from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg'\n//alert(\"1\")\nfunction DatosMundiales() {\n    //alert(\"2\")\n    const [dataMundial, setdataMundial] = useState({});\n    const [loadingMundial, setLoadingMundial] = useState(true);\n    const [actualizarComponente, setActualizarComponente] = useState(false);\n    //alert(\"3\")\n    useEffect( () => {\n        const ObtencionDatos = async () =>{\n            setLoadingMundial(true);\n            //alert(\"4\")\n            const resultadoJSON = await axios(\n                'https://proyectosupnjose.website/api/coronavirus/total',\n            );\n            //alert(\"6\")\n            setdataMundial(resultadoJSON.data);\n            //alert(\"8\")\n            setLoadingMundial(false);\n            //alert(\"9\")\n        }\n        ObtencionDatos();\n    }, [actualizarComponente]);\n    //alert(\"10\")\n    return (\n        <div>\n            <section className=\"DatosMundiales\">\n                <div className=\" text-center\">\n                    \n                    <section className=\"jumbotron text-center\">\n                        <div className=\"container\">\n                            <img className=\"d-block mx-auto mb-4\" src={logo} alt=\"imgCovid19\" />\n                            <h1 className=\"display-4\">Coronavirus en el Per√∫</h1>\n                            <p className=\"lead\">Aqu√≠ encontrar√°s informaci√≥n y noticias sobre el COVID-19 en Per√∫ y en el mundo.ü¶†</p>\n                            <p className=\"text-muted\"><em>(Mantenemos actualizada nuestra informaci√≥n a diario)</em> </p>\n                        </div>\n\n                    </section>\n                    <hr></hr>\n                    <section className=\"jumbotron text-center\">\n                        <div className=\"container\">\n                            <h1 className=\"display-4\">Datos del Mundo üó∫Ô∏è</h1>\n                            <div className=\"my-3 p-3\">\n                                <p className=\"text-muted\"><em>(Mantenemos actualizada nuestra informaci√≥n a diario)</em></p>\n                                <button className=\"btn btn-primary\" onClick={() => setActualizarComponente(!actualizarComponente)} >Actualizar informaci√≥n ahora</button>\n                            </div>\n                            \n                            \n                            <div className=\"row\">\n                                <div className=\"col-md-4\">\n                                    <h2>Casos de Coronavirus</h2>\n                                    <p>Todos los casos confirmados de <code>Covid-19</code> en todo el mundo. </p>\n                                    <div className=\"cases\" style={{color:\"purple\" }}>\n                                    {loadingMundial ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">{dataMundial.cases}</h4>}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-4\">\n                                    <h2>Muertes</h2>\n                                    <p>La cantidad de muertes causadas por el <code>Covid-19</code> en todo el mundo.</p>\n                                    <div className=\"deaths\" style={{color:\"red\" }}>\n                                    {loadingMundial ?<div className=\"spinner-border text-danger\" role=\"status\"></div>  : <h4 className=\"\">{dataMundial.deaths}</h4>}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-4\">\n                                    <h2>Casos recuperados</h2>\n                                    <p>La cantidad de personas que se recuperaron del <code>Covid-19</code></p>\n                                    <div className=\"recovered\" style={{color:\"green\" }}>\n                                    {loadingMundial ? <div className=\"spinner-border text-success\" role=\"status\"></div> : <h4 className=\"\">{dataMundial.recovered}</h4>}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <hr></hr>\n                </div>\n            </section>\n        </div>\n    )\n}\nexport default DatosMundiales","import React, { useState, useEffect,prevState } from 'react';\nimport axios from 'axios';\n//alert(\"1\")\nfunction DatosCountry() {\n    const [datosCountry, setDatosCountry] = useState([]);\n    const [indexDatosCountry, setIndexDatosCountry] = useState(0);\n    const [loadingCounrty, setLoadingCountry] = useState(true);\n    const [actualizarComponente, setActualizarComponente] = useState(false);\n    const [unaVez, setUnaVez] = useState(true);\n\n    useEffect( () => {\n        //alert(\"2\")\n        const ObtensionDatos = async () =>{\n            //alert(\"2.1\")\n            setLoadingCountry(true);\n            //alert(\"2.2\")\n            const datos = await axios(\n                'https://proyectosupnjose.website/api/coronavirus/countries',\n            );\n            //alert(\"2.3\")\n            setDatosCountry(datos.data)\n            //alert(\"2.6\")\n            setLoadingCountry(false)\n\n            if(unaVez===true){\n                datos.data.filter( (datoCountry,index) =>{\n                    if(datoCountry.country==='Peru'){\n                        setIndexDatosCountry(index)\n                    }\n                })\n                setUnaVez(false)\n            }        \n        }\n        ObtensionDatos();\n    }, [actualizarComponente]);\n    //console.log(prevState)\n\n    return (\n        <div>\n            <section className=\"jumbotron text-center DatosPeru\">\n                <div className=\"text-center\">\n\n                    <div className=\"container form-group\">\n                        <label className=\"display-4\">Selecciona tu Pa√≠s :</label>\n                        <select id=\"select_country\" data-live-search=\"true\" data-show-subtext=\"true\" className=\"form-control\" onChange={e => setIndexDatosCountry(e.currentTarget.value)}>\n                            {\n                                loadingCounrty ?\n                                    <option>Obteniendo datos ...</option>\n                                :\n                                datosCountry.map((datoCountry,index) => (\n                                    <option key={index} selected={index==indexDatosCountry} value={index}>{datoCountry.country +\" - \"+ \"Top: \"+(index+1)}</option>\n                                    )\n                                )\n                            }\n                        </select>\n                    </div>\n                    \n                    {loadingCounrty ? <h1 className=\"display-4\">Cargando ...</h1>  : <h1 className=\"display-4\">Datos de {datosCountry[indexDatosCountry].country}</h1>}\n                    <div className=\"my-3\">\n                        <p className=\"text-muted\"><em>(Mantenemos actualizada nuestra informaci√≥n a diario)</em></p>\n                        <button className=\"btn btn-primary\" onClick={() => setActualizarComponente(!actualizarComponente)}>Actualizar informaci√≥n ahora</button>\n                    </div>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-4\">\n                                <h2>Casos de Coronavirus</h2>\n                                {loadingCounrty ? <p>Casos de <code>Covid-19</code> en ...</p>  : <p>Casos de <code>Covid-19</code> en {datosCountry[indexDatosCountry].country}.</p>}\n                                <div className=\"casesPeru\" style={{color:\"purple\" }}>\n                                {loadingCounrty ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">{datosCountry[indexDatosCountry].total}</h4>}\n                                </div>\n                            </div>\n                            <div className=\"col-md-4\">\n                                <h2>Nuevos Casos</h2>\n                                {loadingCounrty ? <p>Nuevos casos de <code>Covid-19</code> en ...</p>  : <p>Nuevos casos de <code>Covid-19</code> en {datosCountry[indexDatosCountry].country}.</p>}\n                                <div className=\"deathsPeru\" style={{color:\"blue\" }}>\n                                {loadingCounrty ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">{datosCountry[indexDatosCountry].newCases}</h4>}\n                                </div>\n                            </div>\n                            <div className=\"col-md-4\">\n                                <h2>Total de Muertes</h2>\n                                {loadingCounrty ? <p>Total de muertes causadas por el <code>Covid-19</code> en ...</p>  : <p>Total de muertes causadas por el <code>Covid-19</code> en {datosCountry[indexDatosCountry].country}.</p>}\n                                <div className=\"deathsPeru\" style={{color:\"red\" }}>\n                                {loadingCounrty ? <div className=\"spinner-border text-danger\" role=\"status\"></div>  : <h4 className=\"\">{datosCountry[indexDatosCountry].totalDeaths}</h4>}\n                                </div>\n                            </div>\n                            <div className=\"col-md-4\">\n                                <h2>Nuevas Muertes</h2>\n                                {loadingCounrty ? <p>Nuevas muertes <code>Covid-19</code> en ...</p>  : <p>Nuevas muertes <code>Covid-19</code> en {datosCountry[indexDatosCountry].country}.</p>}\n                                <div className=\"deathsPeru\" style={{color:\"red\" }}>\n                                {loadingCounrty ? <div className=\"spinner-border text-danger\" role=\"status\"></div>  : <h4 className=\"\">{datosCountry[indexDatosCountry].newDeaths}</h4>}\n                                </div>\n                            </div>\n                            <div className=\"col-md-4\">\n                                <h2>Casos Serios</h2>\n                                {loadingCounrty ? <p>Total de casos graves ocasionados por el <code>Covid-19</code> en ...</p>  : <p>Total de casos graves ocasionados por el <code>Covid-19</code> en {datosCountry[indexDatosCountry].country}.</p>}\n                                <div className=\"deathsPeru\">\n                                {loadingCounrty ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">{datosCountry[indexDatosCountry].serious}</h4>}\n                                </div>\n                            </div>\n                            <div className=\"col-md-4\">\n                                <h2>Casos recuperados</h2>\n                                {loadingCounrty ? <p>La cantidad de personas que se recuperaron del <code>Covid-19</code> en ...</p>  : <p>La cantidad de personas que se recuperaron del <code>Covid-19</code> en {datosCountry[indexDatosCountry].country}</p>}\n                                <div className=\"recoveredPeru\" style={{color:\"green\" }}>\n                                {loadingCounrty ? <div className=\"spinner-border text-success\" role=\"status\"></div>  : <h4 className=\"\">{datosCountry[indexDatosCountry].totalRecovered}</h4>}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                </div>\n            </section>\n            \n        </div>\n    )\n}\nexport default DatosCountry","import React from 'react';\nfunction DatosRegionesPeru() {\n    return (\n        <div className=\"container\">\n\n            <hr></hr>\n\n            <section className=\"DatosRegionesPeru jumbotron text-center\">\n                <div className=\" text-center\">\n                    <h2 className=\"display-4\">Twitter Minsa</h2>\n                    <div className=\"container\">\n                        <a className=\"twitter-timeline\" href=\"https://twitter.com/Minsa_Peru?ref_src=twsrc%5Etfw\">Tweets by Minsa_Peru</a>\n                    </div>\n                \n                </div>\n            </section>\n        </div>\n    )\n}\nexport default DatosRegionesPeru","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer'\nimport DatosMundiales from './DatosMundiales'\nimport DatosCountry from './DatosCountry'\nimport DatosRegionesPeru from './DatosRegionesPeru'\n\nfunction App (){\n  \n  return (\n    <div>\n      <Navbar />\n      <DatosMundiales />\n      <DatosCountry />\n      <DatosRegionesPeru />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (/*process.env.NODE_ENV === 'production' && */'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  console.log(\"check\")\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      console.log(\"check1\")\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        console.log(\"no servicio worker enocntrado\")\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        console.log(\"o check\")\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n//console.time('TIME index.js');\nReactDOM.render(<App />, document.getElementById('root'));\n//console.timeEnd('TIME index.js');\nserviceWorker.unregister();\n"],"sourceRoot":""}